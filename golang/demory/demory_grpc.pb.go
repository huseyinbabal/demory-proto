// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demory

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoryClient is the client API for Demory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoryClient interface {
	// Map
	MapPut(ctx context.Context, in *MapPutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MapGet(ctx context.Context, in *MapGetRequest, opts ...grpc.CallOption) (*MapGetResponse, error)
	MapPutIfAbsent(ctx context.Context, in *MapPutIfAbsentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MapRemove(ctx context.Context, in *MapRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	MapClear(ctx context.Context, in *MapClearRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Cache
	CachePut(ctx context.Context, in *CachePutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CacheGet(ctx context.Context, in *CacheGetRequest, opts ...grpc.CallOption) (*CacheGetResponse, error)
	CacheRemove(ctx context.Context, in *CacheRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	CacheClear(ctx context.Context, in *CacheClearRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Server
	JoinToCluster(ctx context.Context, in *JoinToClusterRequest, opts ...grpc.CallOption) (*JoinToClusterResponse, error)
}

type demoryClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoryClient(cc grpc.ClientConnInterface) DemoryClient {
	return &demoryClient{cc}
}

func (c *demoryClient) MapPut(ctx context.Context, in *MapPutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Demory/MapPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) MapGet(ctx context.Context, in *MapGetRequest, opts ...grpc.CallOption) (*MapGetResponse, error) {
	out := new(MapGetResponse)
	err := c.cc.Invoke(ctx, "/Demory/MapGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) MapPutIfAbsent(ctx context.Context, in *MapPutIfAbsentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Demory/MapPutIfAbsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) MapRemove(ctx context.Context, in *MapRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Demory/MapRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) MapClear(ctx context.Context, in *MapClearRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Demory/MapClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) CachePut(ctx context.Context, in *CachePutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Demory/CachePut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) CacheGet(ctx context.Context, in *CacheGetRequest, opts ...grpc.CallOption) (*CacheGetResponse, error) {
	out := new(CacheGetResponse)
	err := c.cc.Invoke(ctx, "/Demory/CacheGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) CacheRemove(ctx context.Context, in *CacheRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Demory/CacheRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) CacheClear(ctx context.Context, in *CacheClearRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/Demory/CacheClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoryClient) JoinToCluster(ctx context.Context, in *JoinToClusterRequest, opts ...grpc.CallOption) (*JoinToClusterResponse, error) {
	out := new(JoinToClusterResponse)
	err := c.cc.Invoke(ctx, "/Demory/JoinToCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoryServer is the server API for Demory service.
// All implementations must embed UnimplementedDemoryServer
// for forward compatibility
type DemoryServer interface {
	// Map
	MapPut(context.Context, *MapPutRequest) (*empty.Empty, error)
	MapGet(context.Context, *MapGetRequest) (*MapGetResponse, error)
	MapPutIfAbsent(context.Context, *MapPutIfAbsentRequest) (*empty.Empty, error)
	MapRemove(context.Context, *MapRemoveRequest) (*empty.Empty, error)
	MapClear(context.Context, *MapClearRequest) (*empty.Empty, error)
	// Cache
	CachePut(context.Context, *CachePutRequest) (*empty.Empty, error)
	CacheGet(context.Context, *CacheGetRequest) (*CacheGetResponse, error)
	CacheRemove(context.Context, *CacheRemoveRequest) (*empty.Empty, error)
	CacheClear(context.Context, *CacheClearRequest) (*empty.Empty, error)
	// Server
	JoinToCluster(context.Context, *JoinToClusterRequest) (*JoinToClusterResponse, error)
	mustEmbedUnimplementedDemoryServer()
}

// UnimplementedDemoryServer must be embedded to have forward compatible implementations.
type UnimplementedDemoryServer struct {
}

func (UnimplementedDemoryServer) MapPut(context.Context, *MapPutRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapPut not implemented")
}
func (UnimplementedDemoryServer) MapGet(context.Context, *MapGetRequest) (*MapGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapGet not implemented")
}
func (UnimplementedDemoryServer) MapPutIfAbsent(context.Context, *MapPutIfAbsentRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapPutIfAbsent not implemented")
}
func (UnimplementedDemoryServer) MapRemove(context.Context, *MapRemoveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapRemove not implemented")
}
func (UnimplementedDemoryServer) MapClear(context.Context, *MapClearRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapClear not implemented")
}
func (UnimplementedDemoryServer) CachePut(context.Context, *CachePutRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CachePut not implemented")
}
func (UnimplementedDemoryServer) CacheGet(context.Context, *CacheGetRequest) (*CacheGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheGet not implemented")
}
func (UnimplementedDemoryServer) CacheRemove(context.Context, *CacheRemoveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheRemove not implemented")
}
func (UnimplementedDemoryServer) CacheClear(context.Context, *CacheClearRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheClear not implemented")
}
func (UnimplementedDemoryServer) JoinToCluster(context.Context, *JoinToClusterRequest) (*JoinToClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinToCluster not implemented")
}
func (UnimplementedDemoryServer) mustEmbedUnimplementedDemoryServer() {}

// UnsafeDemoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoryServer will
// result in compilation errors.
type UnsafeDemoryServer interface {
	mustEmbedUnimplementedDemoryServer()
}

func RegisterDemoryServer(s grpc.ServiceRegistrar, srv DemoryServer) {
	s.RegisterService(&Demory_ServiceDesc, srv)
}

func _Demory_MapPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapPutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).MapPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/MapPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).MapPut(ctx, req.(*MapPutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_MapGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).MapGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/MapGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).MapGet(ctx, req.(*MapGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_MapPutIfAbsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapPutIfAbsentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).MapPutIfAbsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/MapPutIfAbsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).MapPutIfAbsent(ctx, req.(*MapPutIfAbsentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_MapRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).MapRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/MapRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).MapRemove(ctx, req.(*MapRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_MapClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).MapClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/MapClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).MapClear(ctx, req.(*MapClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_CachePut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CachePutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).CachePut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/CachePut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).CachePut(ctx, req.(*CachePutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_CacheGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).CacheGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/CacheGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).CacheGet(ctx, req.(*CacheGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_CacheRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).CacheRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/CacheRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).CacheRemove(ctx, req.(*CacheRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_CacheClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheClearRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).CacheClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/CacheClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).CacheClear(ctx, req.(*CacheClearRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demory_JoinToCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoryServer).JoinToCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Demory/JoinToCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoryServer).JoinToCluster(ctx, req.(*JoinToClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Demory_ServiceDesc is the grpc.ServiceDesc for Demory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Demory",
	HandlerType: (*DemoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MapPut",
			Handler:    _Demory_MapPut_Handler,
		},
		{
			MethodName: "MapGet",
			Handler:    _Demory_MapGet_Handler,
		},
		{
			MethodName: "MapPutIfAbsent",
			Handler:    _Demory_MapPutIfAbsent_Handler,
		},
		{
			MethodName: "MapRemove",
			Handler:    _Demory_MapRemove_Handler,
		},
		{
			MethodName: "MapClear",
			Handler:    _Demory_MapClear_Handler,
		},
		{
			MethodName: "CachePut",
			Handler:    _Demory_CachePut_Handler,
		},
		{
			MethodName: "CacheGet",
			Handler:    _Demory_CacheGet_Handler,
		},
		{
			MethodName: "CacheRemove",
			Handler:    _Demory_CacheRemove_Handler,
		},
		{
			MethodName: "CacheClear",
			Handler:    _Demory_CacheClear_Handler,
		},
		{
			MethodName: "JoinToCluster",
			Handler:    _Demory_JoinToCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demory/demory.proto",
}
